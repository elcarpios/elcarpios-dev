---
type ButtonStyle = "primary" | "secondary" | "outline";

type ButtonProps = {};

type LinkProps = {
  href: string;
};

type Props = {
  id?: string;
  style?: ButtonStyle;
  className?: string;
} & (ButtonProps | LinkProps);

const LINK_STYLES: { [key in ButtonStyle]: string } = {
  primary:
    "justify-center px-6 py-3 text-white border-primary-700 bg-primary-700 hover:bg-primary-600",
  secondary:
    "justify-center px-6 py-3 border-gray-300 hover:bg-gray-100 dark:text-white dark:border-gray-400 dark:hover:bg-gray-600",
  outline:
    "border-0 py-0 px-0 h-auto font-normal underline-offset-1 hover:underline text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200",
};

const { style = "primary", href, className = "", id = "" } = Astro.props;

const commonProps = {
  id,
  class: `inline-flex items-center h-12 gap-x-1.5 rounded-lg font-semibold border wrap ${LINK_STYLES[style]} ${className}`,
};
---

{
  href ? (
    <a
      target={href.startsWith("http") ? "_blank" : undefined}
      href={href}
      {...commonProps}
    >
      <slot />
    </a>
  ) : (
    <button {...commonProps}>
      <slot />
    </button>
  )
}
